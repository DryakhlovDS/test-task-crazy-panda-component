{"version":3,"sources":["components/column/row.js","components/filter/filter.js","components/pagination/pagination.js","components/table/table.js","App.js","reportWebVitals.js","index.js"],"names":["row","text","classMode","className","FilterPanda","changeFilter","type","name","onChange","PaginationPanda","pages","curPage","toggle","paginationsArray","i","push","paginationItems","map","num","index","style","onClick","e","value","event","document","querySelectorAll","forEach","el","classList","remove","target","add","Table","title","rows","useState","sortUp","setSortUp","sortArray","setSortArray","slice","page","setPage","thisPage","setThisPage","totalPage","Math","ceil","length","changePage","currentPage","arr","startPage","endPage","column","element","subStr","filteredArray","filter","item","includes","sort","prev","next","localeCompare","reverse","App","row2","getItem","startStr","Number","random","toFixed","endStr","trim","len","newStr","getItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f82ebc46.chunk.js","sourcesContent":["function row({ text, classMode }) {\r\n  return (\r\n    <tr>\r\n      <td className={classMode}>{text}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default row;\r\n","import \"./filter.scss\";\r\n\r\nfunction FilterPanda({ changeFilter }) {\r\n  return (\r\n    <div className='filter-panda'>\r\n      <label>Filter string: </label>\r\n      <input type='text' name='filter' onChange={changeFilter} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FilterPanda;\r\n","import \"./pagination.scss\";\r\n\r\nfunction PaginationPanda({ pages, curPage, toggle }) {\r\n  let paginationsArray = [];\r\n  for (let i = 1; i <= pages; i++) {\r\n    paginationsArray.push(i);\r\n  }\r\n  const paginationItems = paginationsArray.map((num, index) => {\r\n    const style = num === curPage ? \"active\" : \"\";\r\n    return (\r\n      <button onClick={(e) => changePage(num, e)} className={style} key={index}>\r\n        {num}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  function changePage(value, event) {\r\n    const allPages = document.querySelectorAll(\".pagination-panda button\");\r\n    allPages.forEach((el) => el.classList.remove(\"active\"));\r\n    event.target.classList.add(\"active\");\r\n    toggle(value);\r\n  }\r\n  return <div className='pagination-panda'>{paginationItems}</div>;\r\n}\r\n\r\nexport default PaginationPanda;\r\n","import React, { useState } from \"react\";\r\nimport Row from \"../column/row\";\r\nimport FilterPanda from \"../filter/filter\";\r\nimport PaginationPanda from \"../pagination/pagination\";\r\nimport \"./table.scss\";\r\n\r\nfunction Table({\r\n  title = \"Default title\",\r\n  rows = [\"1\", \"2\", \"three\", \"15\", \"one\"],\r\n}) {\r\n  let [sortUp, setSortUp] = useState(true);\r\n  const [sortArray, setSortArray] = useState(rows);\r\n  const [page, setPage] = useState(sortArray.slice(0, 50));\r\n  let [thisPage, setThisPage] = useState(1);\r\n  const rowsOnPage = 50;\r\n  const totalPage = Math.ceil(sortArray.length / rowsOnPage);\r\n\r\n  function toggleSort() {\r\n    if (sortUp) {\r\n      sortArray.sort((prev, next) => prev.localeCompare(next));\r\n      sortArray.sort((prev, next) => prev - next);\r\n    } else {\r\n      sortArray.reverse();\r\n    }\r\n    setSortArray([...sortArray]);\r\n    setSortUp(!sortUp);\r\n    changePage(thisPage);\r\n  }\r\n\r\n  function changeFilter(e) {\r\n    const subStr = e.target.value;\r\n    let filteredArray = [];\r\n    if (subStr !== \"\") {\r\n      filteredArray = rows.filter((item) => item.includes(subStr));\r\n    } else {\r\n      filteredArray = rows;\r\n    }\r\n    setSortArray([...filteredArray]);\r\n    setSortUp(true);\r\n    changePage(1, filteredArray);\r\n  }\r\n\r\n  function changePage(currentPage = 1, arr = sortArray) {\r\n    let startPage = (currentPage - 1) * rowsOnPage;\r\n    let endPage = currentPage * rowsOnPage;\r\n    setPage(arr.slice(startPage, endPage));\r\n    setThisPage(currentPage);\r\n  }\r\n\r\n  const column = page.map((element, index) => {\r\n    return <Row key={index} text={element} classMode='table-panda__row' />;\r\n  });\r\n  return (\r\n    <div>\r\n      <FilterPanda changeFilter={changeFilter} />\r\n      <PaginationPanda\r\n        pages={totalPage}\r\n        curPage={thisPage}\r\n        toggle={changePage}\r\n      />\r\n      <table className='table-panda'>\r\n        <thead onClick={() => toggleSort()}>\r\n          <Row text={title} classMode='table-panda__head' />\r\n        </thead>\r\n        <tbody>{column}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import \"./App.css\";\nimport Table from \"./components/table/table\";\n\nfunction App() {\n  const abc = \"abcdefgihorpbl mjdospqk scmdlsalskj fjslaskdjf\";\n  const row2 = [];\n  function getItems(len) {\n    for (let i = 0; i < len; i++) {\n      let newStr = getItem();\n      while (!newStr) {\n        newStr = getItem();\n      }\n      row2.push(newStr);\n    }\n  }\n\n  function getItem() {\n    const startStr = Number((Math.random() * 41).toFixed());\n    const endStr =\n      Number((Math.random() * (41 - startStr)).toFixed()) + 5 + startStr;\n    return abc.slice(startStr, endStr).trim();\n  }\n\n  getItems(123);\n\n  return (\n    <div className='App'>\n      <div className='container'>\n        <Table title='Products' rows={row2} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}